name: Publish With Poetry
description: Publish a Python package with Poetry

branding:
  icon: package
  color: gray-dark

inputs:
  python-version:
    description: |
      The version of Python to use. If you don't provide this, the action will use whatever version is in
      $PATH. Poetry requires Python 3.7 or later.
    required: false
  poetry-version:
    description: |
      The version of Poetry to use. If you don't provide this, the action will use the version of Poetry
      in $PATH if one exists and install the latest stable version of Poetry otherwise.
    required: false
  repo:
    description: |
      The repository to publish to. Must be either "pypi", "testpypi", or an appropriate URL.
    required: false
    default: "pypi"
  username:
    description: The username to use for the publication repository.
    required: false
    default: ""
  password:
    description: The password to use for the publication repository.
    required: false
    default: ""
  token:
    description: |
      The token to use for the publication repository. If provided, this will be preferred over a username and password.
    required: false
    default: ${{ secrets.PYPI_TOKEN }}
  build:
    description: Whether to build the package before publishing it.
    required: false
    default: "true"
  build-format:
    description: |
      The format to build the package in. Must be either "sdist" or "wheel". Both formats will be built if this isn't
      specified.
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        if ! [[ -n "${{ inputs.username }}" || -n "${{ inputs.password }}" ]] && [[ -z "${{ inputs.token }}" ]]; then
          echo "::error::You must provide either a username and password or a token."
          exit 1
        fi

    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Poetry
      shell: bash
      run: |
        if  [[ ! -x "$(command -v poetry)" || -n "$POETRY_VERSION" ]]; then
          curl -sSL https://install.python-poetry.org | python -
        else
          echo "Skipping Poetry installation because it is already installed."
        fi
      env:
        POETRY_VERSION: ${{ inputs.poetry-version }}

    - name: Configure Credentials
      shell: bash
      run: |
        if [[ "${{ inputs.repo }}" == "pypi" ]]; then
          repo="https://upload.pypi.org/legacy/"
        elif [[ "${{ inputs.repo }}" == "testpypi" ]]; then
          repo="https://test.pypi.org/legacy/"
        else
          repo="${{ inputs.repo }}"
        fi

        poetry config repositories.publish "$repo"

        if [[ -n "${{ inputs.token }}" ]]; then
          poetry config pypi-token.publish "${{ inputs.token }}"
        else
          poetry config http-basic.publish "${{ inputs.username }}" "${{ inputs.password }}"
        fi

    - name: Build
      shell: bash
      if: ${{ inputs.build == 'true' }}
      run: |

        if [[ -z "${{ inputs.build-format }}" ]]; then
          poetry build
        else
          poetry build --format ${{ inputs.build-format }}
        fi

    - name: Publish
      shell: bash
      run: poetry publish --repository publish

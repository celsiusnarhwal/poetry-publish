name: Publish With Poetry
description: Publish a Python package with Poetry

branding:
  icon: package
  color: gray-dark

inputs:
  python-version:
    description: |
      The version of Python to use. If you don't provide this, the action will use whatever version is in
      $PATH. Poetry requires Python 3.7 or later.
    required: false
  poetry-version:
    description: |
      The version of Poetry to use. If you don't provide this, the action will use the version of Poetry
      in $PATH if one exists and install the latest stable version of Poetry otherwise.
    required: false
  repo:
    description: |
      The repository to publish to. Must be either "pypi", "testpypi", or an appropriate URL.
    required: false
    default: "pypi"
  username:
    description: The username to use for the publication repository.
    required: false
  password:
    description: The password to use for the publication repository.
    required: false
  token:
    description: |
      The token to use for the publication repository. If provided, this will be preferred over a username and password.
    required: false
  build:
    description: Whether to build the package before publishing it.
    required: false
    default: "true"
  build-format:
    description: |
      The format to build the package in. Must be either "sdist" or "wheel". Both formats will be built if this isn't
      specified.
    required: false

runs:
  using: composite
  steps:
    - name: Validate Inputs
      shell: python
      run: |
        import os
        import sys
          
        if not os.getenv("INPUT_TOKEN") and not (os.getenv("INPUT_USERNAME") and os.getenv("INPUT_PASSWORD")):
            print("You must provide either a token or a username and password.", file=sys.stderr)
            sys.exit(1)

    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Poetry
      shell: bash
      run: |
        if  [[ ! -x "$(command -v poetry)" || -n "$POETRY_VERSION" ]]; then
          curl -sSL https://install.python-poetry.org | python -
        else
          echo "Skipping Poetry installation because it is already installed."
        fi
      env:
        POETRY_VERSION: ${{ inputs.poetry-version }}

    - name: Resolve Repository
      shell: python
      run: |
        import os
        
        open(os.getenv("GITHUB_ENV", "w")).write(
            "REPO_URL=" +
            {
                "pypi": "https://upload.pypi.org/legacy/",
                "testpypi": "https://test.pypi.org/legacy/",
            }.get(os.getenv("INPUT_REPO"), os.getenv("INPUT_REPO"))
        )

    - name: Build
      shell: bash
      if: ${{ inputs.build == 'true' }}
      run: |
        if [[ -z "${{ inputs.build-format }}" ]]; then
          poetry build
        else
          poetry build --format ${{ inputs.build-format }}
        fi

    - name: Publish
      shell: bash
      run: poetry publish --repository publish
      env:
        POETRY_REPOSITORIES_PUBLISH_URL: ${{ env.REPO_URL }}
        POETRY_PYPI_TOKEN_PUBLISH: ${{ inputs.token }}
        POETRY_HTTP_BASIC_PUBLISH_USERNAME: ${{ inputs.username }}
        POETRY_HTTP_BASIC_PUBLISH_PASSWORD: ${{ inputs.password }}

